@startuml
class AppInstaller {
    + <<override>> InstallBindings() : void
}
MonoInstaller <|-- AppInstaller
AppInstaller --> "sessionCoordinator" AzureSessionCoordinator
AppInstaller --> "addAnchorUseCase" AddAnchorUseCase
AppInstaller --> "cloudManager" SpatialAnchorManager
AppInstaller --> "objectsCreator" ObjectsCreatorImpl
AppInstaller --> "sceneAwarnessValidator" SceneAwarnessValidator
interface IGameObjectEditor {
    setName(gameObject:GameObject, name:string) : void
    getName(gameObject:GameObject) : string
    setPose(gameObject:GameObject, pose:Pose, scale:Vector3) : void
}
class GameObjectEditorImpl {
    + getName(gameObject:GameObject) : string
    + setName(gameObject:GameObject, name:string) : void
    + setPose(gameObject:GameObject, pose:Pose, scale:Vector3) : void
}
IGameObjectEditor <|-- GameObjectEditorImpl
class AzureSessionCoordinator {
    + isStarted : bool = false
    + Construct(anchorsRepository:IAnchorsRepository, anchorLocator:IAnchorLocator, objectsCreator:IObjectsCreator, startAzureSession:IStartAzureSession, saveAnchor:IAnchorCreator, gameObjectEditor:IGameObjectEditor) : void
    + Start() : void
}
MonoBehaviour <|-- AzureSessionCoordinator
interface IBoundsControlVisibilityEditor {
    + {abstract} enableBoundsControlVisibility() : void
    + {abstract} disableBoundsControlVisibility() : void
}
interface IBoundsControlVisibilityProvider {
}
class BoundsControlVisibilityRepository {
    + enableBoundsControlVisibility() : void
    + disableBoundsControlVisibility() : void
}
class "IReadOnlyReactiveProperty`1"<T> {
}
IBoundsControlVisibilityProvider --> "isBoundsVisibilityEnabled<bool>" "IReadOnlyReactiveProperty`1"
IBoundsControlVisibilityEditor <|-- BoundsControlVisibilityRepository
IBoundsControlVisibilityProvider <|-- BoundsControlVisibilityRepository
BoundsControlVisibilityRepository --> "isBoundsVisibilityEnabled<bool>" "IReadOnlyReactiveProperty`1"
interface IObjectsCreator {
    + {abstract} createNewMachine(machineIndex:int) : void
    + {abstract} createNewMachineWithGO(machineIndex:int) : GameObject
}
class ObjectsCreatorImpl {
    + Construct(machineViewFactory:MachineView.Factory, anchorPresenterFactory:MachinePresenter.Factory) : void
    + createNewMachine(machineIndex:int) : void
    + createNewMachineWithGO(machineIndex:int) : GameObject
}
MonoBehaviour <|-- ObjectsCreatorImpl
IObjectsCreator <|-- ObjectsCreatorImpl
interface IMachineInfoRepository {
    + getMachineInfo(index:int) : IReadOnlyReactiveProperty<MachineInfo?>
}
class MachineInfoRepository {
    + MachineInfoRepository()
    + getMachineInfo(index:int) : IReadOnlyReactiveProperty<IMachineInfoRepository.MachineInfo?>
}
class MachineInfo <<struct>> {
    + hallId : int
    + name : string
    + efficiency : int
    + status : string
    + symbol : string
}
IMachineInfoRepository <|-- MachineInfoRepository
IMachineInfoRepository +-- MachineInfo
MachineInfo --> "technicalExaminationDate" DateTime
class UserMenuView {
    + Construct(presenter:UserMenuPresenter) : void
}
MonoBehaviour <|-- UserMenuView
UserMenuView --> "enableBoundsButton" Interactable
UserMenuView --> "disableBoundsButton" Interactable
class MachineView {
    + initViews() : void
    + Initialize(anchorPresenter:MachinePresenter) : void
    + OnDestroy() : void
}
class MachineViewFactory {
    + MachineViewFactory(container:DiContainer)
    + Create(prefab:Object) : MachinePresenter
    + Create(prefab:Object, presenter:MachinePresenter) : MachineView
}
class Factory {
}
class "IFactory`3"<T1,T2,T3> {
}
class "PlaceholderFactory`3"<T1,T2,T3> {
}
MonoBehaviour <|-- MachineView
MachineView --> "addAnchorButton" Interactable
MachineView --> "removeAnchorButton" Interactable
MachineView --> "tapToPlaceButton" Interactable
MachineView --> "deleteButton" Interactable
"IFactory`3" "<UnityEngine.Object,MachinePresenter,MachineView>" <|-- MachineViewFactory
MachineViewFactory --> "_container" DiContainer
MachineView +-- Factory
"PlaceholderFactory`3" "<UnityEngine.Object,MachinePresenter,MachineView>" <|-- Factory
class DebugWindow {
}
MonoBehaviour <|-- DebugWindow
interface IStartAzureSession {
    invoke() : Task
}
interface IAnchorRemover {
    + deleteNativeAnchor(anchorGameObject:GameObject) : void
    + deleteCloudAnchor(indetifier:string) : Task
}
class AzureCloudManager {
    {static} ANCHOR_TYPE_PROP : string = "ANCHOR_TYPE"
    {static} ANCHOR_SCALE_X : string = "ANCHOR_SCALE_X"
    {static} ANCHOR_SCALE_Y : string = "ANCHOR_SCALE_Y"
    {static} ANCHOR_SCALE_Z : string = "ANCHOR_SCALE_Z"
    + AzureCloudManager(cloudManager:SpatialAnchorManager)
    + <<async>> createCloudAnchor(gameObject:GameObject, propIndex:int) : Task<IAnchorCreator.Result>
    + createNativeAnchor(gameObject:GameObject) : void
    + <<async>> invoke() : Task
    + deleteNativeAnchor(anchorGameObject:GameObject) : void
    + <<async>> deleteCloudAnchor(indetifier:string) : Task
}
IAnchorCreator <|-- AzureCloudManager
IAnchorRemover <|-- AzureCloudManager
IStartAzureSession <|-- AzureCloudManager
AzureCloudManager --> "_cloudManager" SpatialAnchorManager
interface IAwarnessValidator {
    + validateSceneReadiness() : Task
}
class SceneAwarnessValidator {
    + Construct(cloudManager:SpatialAnchorManager) : void
    + <<async>> validateSceneReadiness() : Task
    Update() : void
}
MonoBehaviour <|-- SceneAwarnessValidator
IAwarnessValidator <|-- SceneAwarnessValidator
interface IAnchorLocator {
    +  <<event>> CloudAnchorLocated : CloudAnchorLocated 
    + startLocatingAzureAnchors(idsToFind:string[]) : void
}
class AzureAnchorLocator {
    {static} ANCHOR_TYPE_PROP : string = "ANCHOR_TYPE"
    {static} ANCHOR_SCALE_X : string = "ANCHOR_SCALE_X"
    {static} ANCHOR_SCALE_Y : string = "ANCHOR_SCALE_Y"
    {static} ANCHOR_SCALE_Z : string = "ANCHOR_SCALE_Z"
    + AzureAnchorLocator(cloudManager:SpatialAnchorManager)
    +  <<event>> CloudAnchorLocated : CloudAnchorLocated 
    + startLocatingAzureAnchors(idsToFind:string[]) : void
}
class CloudAnchorLocatedArgs {
    + type : int <<get>>
    + identifier : string <<get>>
    + CloudAnchorLocatedArgs(pose:Pose, type:int, identifier:string, scale:Vector3)
}
IAnchorLocator <|-- AzureAnchorLocator
AzureAnchorLocator --> "_cloudManager" SpatialAnchorManager
IAnchorLocator +-- CloudAnchorLocatedArgs
EventArgs <|-- CloudAnchorLocatedArgs
CloudAnchorLocatedArgs --> "pose" Pose
CloudAnchorLocatedArgs --> "scale" Vector3
interface IAnchorCreator {
    + createNativeAnchor(gameObject:GameObject) : void
    + createCloudAnchor(gameObject:GameObject, propIndex:int) : Task<Result>
}
class Result {
}
class Success {
    + anchorIdentifier : string <<get>>
    + Success(anchorIdentifier:string)
}
class Failure {
    + exception : Exception? <<get>>
    + Failure(exception:Exception?)
}
IAnchorCreator +-- Result
Result +-- Success
Result <|-- Success
Result +-- Failure
Result <|-- Failure
class UserMenuPresenter {
    + UserMenuPresenter(objectCreator:IObjectsCreator, boundsControlEditor:IBoundsControlVisibilityEditor)
    + enableBoundsControl() : void
    + disableBoundControls() : void
    + createNewMachine(index:int) : void
}
class MachinePresenter {
    +  <<event>> disableTapToPlace : Action 
    +  <<event>> deleteCurrentMachine : Action 
    <<readonly>> _machineIndex : int
    + MachinePresenter(index:int, addAnchorUseCase:IAddAnchorUseCase, removeAnchorUseCase:IRemoveAnchorUseCase, boundsControlProvider:IBoundsControlVisibilityProvider, machineInfoRepository:IMachineInfoRepository, anchorCreator:IAnchorCreator, anchorRemover:IAnchorRemover)
    + setAnchorCreatedState() : void
    + setAnchorNotCreatedState() : void
    + <<async>> setAnchor(gameObject:GameObject) : Task
    + <<async>> removeAnchor(gameObject:GameObject) : Task
    + delete() : void
    + setTapToPlaceNotStarted() : void
    + onDestroy() : void
    + removeLocalAnchor(gameObject:GameObject) : void
    + addLocalAnchor(gameObject:GameObject) : void
}
class State {
    + isAddAnchorVisible : bool = true
    + isTapToPlaceVisible : bool = true
    + isDeleteMachineVisible : bool = true
    + isRemoveAnchorVisible : bool = false
    + areBoundControlsVisible : bool = false
    + machineInfo : MachineInfo? = null
    + State()
    + State(state:State)
}
class "IReadOnlyReactiveProperty`1"<T> {
}
class Factory {
}
class MachineInfo <<struct>> {
    + hallId : int
    + name : string
    + efficiency : int
    + status : string
    + symbol : string
}
class "PlaceholderFactory`2"<T1,T2> {
}
MachinePresenter --> "state<State>" "IReadOnlyReactiveProperty`1"
MachinePresenter --> "_addAnchorUseCase" IAddAnchorUseCase
MachinePresenter --> "_anchorCreator" IAnchorCreator
MachinePresenter --> "_anchorRemover" IAnchorRemover
MachinePresenter --> "_removeAnchorUseCase" IRemoveAnchorUseCase
MachinePresenter --> "_boundsControlProvider" IBoundsControlVisibilityProvider
MachinePresenter --> "_machineInfoRepository" IMachineInfoRepository
MachinePresenter +-- State
MachinePresenter +-- Factory
"PlaceholderFactory`2" "<int,MachinePresenter>" <|-- Factory
State +-- MachineInfo
MachineInfo --> "technicalExaminationDate" DateTime
interface IRemoveAnchorUseCase {
    + removeAzureAnchor(theObject:GameObject) : Task
}
class RemoveAnchorUseCase {
    + RemoveAnchorUseCase(anchorsRepository:IAnchorsRepository, anchorRemover:IAnchorRemover, gameObjectEditor:IGameObjectEditor)
    + <<async>> removeAzureAnchor(theObject:GameObject) : Task
}
IRemoveAnchorUseCase <|-- RemoveAnchorUseCase
interface IAddAnchorUseCase {
    + createAzureAnchor(theObject:GameObject, index:int) : Task<bool>
}
class AddAnchorUseCase {
    + AddAnchorUseCase(anchorsRepository:IAnchorsRepository, saveAnchor:IAnchorCreator, sceneAwarnessValidator:IAwarnessValidator, gameObjectEditor:IGameObjectEditor)
    + <<async>> createAzureAnchor(theObject:GameObject, index:int) : Task<bool>
}
IAddAnchorUseCase <|-- AddAnchorUseCase
AddAnchorUseCase --> "_anchorsRepository" IAnchorsRepository
AddAnchorUseCase --> "_saveAnchor" IAnchorCreator
AddAnchorUseCase --> "_sceneAwarnessValidator" IAwarnessValidator
AddAnchorUseCase --> "_gameObjectEditor" IGameObjectEditor
interface IAnchorsRepository {
    + addAnchor(anchor:AnchorGameObject) : void
    + removeAnchor(id:string) : void
    + getAnchor(id:string) : AnchorGameObject?
    + getAnchorsIds() : List<string>
}
class AnchorGameObject <<struct>> {
    + identifier : string
}
IAnchorsRepository +-- AnchorGameObject
AnchorGameObject --> "gameObject" GameObject
class AzureAnchorsReporitory {
    + addAnchor(anchorGameObject:AnchorGameObject) : void
    + removeAnchor(id:String) : void
    + getAnchor(id:String) : AnchorGameObject?
    + getAnchorsIds() : List<string>
}
IAnchorsRepository <|-- AzureAnchorsReporitory
@enduml
